-- Base de Datos: Observaciones y Análisis de la Industria Pesquera y de Acuicultura del Perú

-- Crear la base de datos
CREATE DATABASE IF NOT EXISTS industria_pesquera_peru;
USE industria_pesquera_peru;

-- Tabla de especies
CREATE TABLE especies (
    id_especie INT PRIMARY KEY,
    nombre_especie VARCHAR(50) NOT NULL,
    descripcion TEXT
);

-- Insertar datos de especies
INSERT INTO especies (id_especie, nombre_especie, descripcion) VALUES
(1, 'Calamar', 'Especie marina de gran importancia comercial en el Perú'),
(2, 'Camarón', 'Crustáceo de alto valor comercial en la acuicultura peruana');

-- Tabla principal de observaciones
CREATE TABLE observaciones_pesqueras (
    id_observacion INT PRIMARY KEY AUTO_INCREMENT,
    codigo INT NOT NULL,
    id_especie INT NOT NULL,
    año_2017 INT,
    año_2018 INT,
    año_2019 INT,
    año_2020 INT,
    año_2021 INT,
    año_2022 INT,
    año_2023 INT,
    FOREIGN KEY (id_especie) REFERENCES especies(id_especie)
);

-- Insertar todos los datos
INSERT INTO observaciones_pesqueras (codigo, id_especie, año_2017, año_2018, año_2019, año_2020, año_2021, año_2022, año_2023) VALUES
(1, 1, 69, 93, 43, 74, 53, 46, 62),
(2, 1, 57, 90, 42, 73, 79, 50, 87),
(3, 1, 82, 43, 53, 86, 100, 62, 52),
(4, 2, 91, 87, 55, 64, 50, 60, 81),
(5, 1, 79, 41, 71, 77, 90, 60, 46),
(6, 1, 87, 98, 67, 91, 69, 58, 73),
(7, 2, 67, 45, 83, 47, 88, 49, 98),
(8, 1, 54, 75, 50, 87, 58, 95, 77),
(9, 1, 93, 95, 75, 87, 54, 83, 100),
(15, 2, 96, 65, 83, 41, 56, 70, 42),
(16, 2, 42, 62, 87, 47, 64, 84, 45),
(17, 2, 85, 55, 85, 50, 61, 75, 70),
(18, 1, 55, 89, 83, 51, 73, 100, 42),
(19, 1, 57, 52, 90, 62, 73, 94, 55),
(20, 1, 60, 79, 92, 93, 73, 98, 75),
(21, 2, 69, 63, 43, 75, 90, 84, 45),
(22, 1, 51, 80, 43, 65, 70, 49, 70),
(23, 1, 67, 44, 91, 71, 78, 47, 66),
(24, 2, 76, 70, 55, 79, 89, 67, 61),
(25, 1, 56, 94, 73, 68, 76, 97, 86),
(26, 1, 42, 95, 43, 76, 47, 57, 66),
(27, 1, 58, 83, 63, 75, 85, 71, 45),
(28, 1, 84, 53, 48, 89, 59, 58, 68),
(29, 1, 92, 50, 90, 95, 89, 72, 47),
(30, 1, 88, 44, 74, 71, 49, 63, 55),
(31, 2, 43, 54, 71, 99, 62, 75, 45),
(32, 1, 77, 100, 78, 48, 74, 95, 57),
(33, 1, 48, 88, 51, 81, 74, 45, 49),
(34, 2, 91, 52, 91, 82, 63, 41, 46),
(35, 1, 99, 69, 93, 100, 73, 94, 43),
(36, 1, 60, 64, 92, 72, 81, 82, 69),
(37, 1, 96, 71, 100, 52, 90, 68, 81),
(38, 1, 50, 95, 46, 69, 98, 99, 59),
(39, 1, 77, 98, 59, 78, 80, 58, 72),
(40, 1, 75, 90, 66, 50, 88, 74, 78),
(41, 2, 85, 86, 50, 96, 60, 93, 70),
(42, 1, 65, 95, 91, 69, 90, 79, 95),
(43, 1, 91, 51, 48, 78, 50, 65, 74),
(44, 2, 77, 57, 73, 42, 95, 84, 93),
(45, 1, 84, 42, 79, 83, 64, 85, 78),
(46, 1, 49, 61, 58, 82, 62, 64, 98),
(47, 1, 76, 54, 92, 42, 56, 88, 50),
(48, 1, 41, 71, 71, 88, 76, 82, 75),
(49, 1, 93, 67, 97, 62, 46, 70, 57),
(50, 2, 53, 59, 88, 83, 80, 57, 42);

-- Crear tabla normalizada para análisis temporal (opcional - mejor estructura)
CREATE TABLE mediciones_anuales (
    id_medicion INT PRIMARY KEY AUTO_INCREMENT,
    codigo INT NOT NULL,
    id_especie INT NOT NULL,
    año INT NOT NULL,
    valor INT NOT NULL,
    fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (id_especie) REFERENCES especies(id_especie),
    INDEX idx_año (año),
    INDEX idx_especie_año (id_especie, año)
);

-- Insertar datos en formato normalizado
INSERT INTO mediciones_anuales (codigo, id_especie, año, valor) 
SELECT codigo, id_especie, 2017, año_2017 FROM observaciones_pesqueras WHERE año_2017 IS NOT NULL
UNION ALL
SELECT codigo, id_especie, 2018, año_2018 FROM observaciones_pesqueras WHERE año_2018 IS NOT NULL
UNION ALL
SELECT codigo, id_especie, 2019, año_2019 FROM observaciones_pesqueras WHERE año_2019 IS NOT NULL
UNION ALL
SELECT codigo, id_especie, 2020, año_2020 FROM observaciones_pesqueras WHERE año_2020 IS NOT NULL
UNION ALL
SELECT codigo, id_especie, 2021, año_2021 FROM observaciones_pesqueras WHERE año_2021 IS NOT NULL
UNION ALL
SELECT codigo, id_especie, 2022, año_2022 FROM observaciones_pesqueras WHERE año_2022 IS NOT NULL
UNION ALL
SELECT codigo, id_especie, 2023, año_2023 FROM observaciones_pesqueras WHERE año_2023 IS NOT NULL;

-- Vistas útiles para análisis

-- Vista: Resumen por especie y año
CREATE VIEW resumen_especie_año AS
SELECT 
    e.nombre_especie,
    m.año,
    COUNT(*) as num_observaciones,
    AVG(m.valor) as promedio,
    MIN(m.valor) as minimo,
    MAX(m.valor) as maximo,
    STDDEV(m.valor) as desviacion_estandar
FROM mediciones_anuales m
JOIN especies e ON m.id_especie = e.id_especie
GROUP BY e.nombre_especie, m.año
ORDER BY e.nombre_especie, m.año;

-- Vista: Tendencia temporal por especie
CREATE VIEW tendencia_especies AS
SELECT 
    e.nombre_especie,
    m.año,
    AVG(m.valor) as valor_promedio,
    LAG(AVG(m.valor)) OVER (PARTITION BY e.nombre_especie ORDER BY m.año) as valor_año_anterior,
    AVG(m.valor) - LAG(AVG(m.valor)) OVER (PARTITION BY e.nombre_especie ORDER BY m.año) as variacion_anual
FROM mediciones_anuales m
JOIN especies e ON m.id_especie = e.id_especie
GROUP BY e.nombre_especie, m.año
ORDER BY e.nombre_especie, m.año;

-- Consultas de ejemplo

-- 1. Ver todos los datos con nombres de especies
SELECT 
    o.codigo,
    e.nombre_especie,
    o.año_2017, o.año_2018, o.año_2019, o.año_2020, 
    o.año_2021, o.año_2022, o.año_2023
FROM observaciones_pesqueras o
JOIN especies e ON o.id_especie = e.id_especie
ORDER BY o.codigo;

-- 2. Promedio anual por especie
SELECT * FROM resumen_especie_año;

-- 3. Tendencia de crecimiento por especie
SELECT * FROM tendencia_especies WHERE valor_año_anterior IS NOT NULL;

-- 4. Top 5 observaciones con mayor valor por año
SELECT año, codigo, nombre_especie, valor
FROM (
    SELECT 
        m.año,
        m.codigo,
        e.nombre_especie,
        m.valor,
        ROW_NUMBER() OVER (PARTITION BY m.año ORDER BY m.valor DESC) as ranking
    FROM mediciones_anuales m
    JOIN especies e ON m.id_especie = e.id_especie
) ranked
WHERE ranking <= 5
ORDER BY año, ranking;

-- 5. Comparativa entre especies por año
SELECT 
    año,
    SUM(CASE WHEN id_especie = 1 THEN valor END) as total_calamar,
    SUM(CASE WHEN id_especie = 2 THEN valor END) as total_camaron,
    AVG(CASE WHEN id_especie = 1 THEN valor END) as promedio_calamar,
    AVG(CASE WHEN id_especie = 2 THEN valor END) as promedio_camaron
FROM mediciones_anuales
GROUP BY año
ORDER BY año;